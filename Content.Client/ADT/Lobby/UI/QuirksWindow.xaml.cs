using System.Linq;
using Content.Client.Guidebook;
using Content.Client.Lobby;
using Content.Client.UserInterface.Controls;
using Content.Shared.Preferences;
using Content.Shared.Traits;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility; // Ganimed trait
using Robust.Client.UserInterface; // Ganimed trait
using Robust.Client.UserInterface.Controls; // Ganimed trait
using Robust.Client.UserInterface.CustomControls; // Ganimed trait
using Robust.Shared.Maths; // Ganimed trait

namespace Content.Client.ADT.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class QuirksWindow : FancyWindow
{
    private readonly IPrototypeManager _proto;

    public Action<TraitPrototype>? QuirkSelected;

    // Ganimed trait start
    private enum QuirkFilter
    {
        Positive,
        Negative,
        Neutral
    }

    private QuirkFilter _currentFilter = QuirkFilter.Neutral;
    private HumanoidCharacterProfile? _currentProfile;
    // Ganimed trait end

    public QuirksWindow(IPrototypeManager proto)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Title = Loc.GetString("quirks-window-title");
        _proto = proto;
        // Ganimed trait start
        PositiveFilterButton.OnPressed += _ => SetFilter(QuirkFilter.Positive);
        NegativeFilterButton.OnPressed += _ => SetFilter(QuirkFilter.Negative);
        NeutralFilterButton.OnPressed += _ => SetFilter(QuirkFilter.Neutral);

        NeutralFilterButton.Pressed = true;
    }

    private void SetFilter(QuirkFilter filter)
    {
        if (_currentFilter == filter)
            return;

        _currentFilter = filter;

        PositiveFilterButton.Pressed = filter == QuirkFilter.Positive;
        NegativeFilterButton.Pressed = filter == QuirkFilter.Negative;
        NeutralFilterButton.Pressed = filter == QuirkFilter.Neutral;

        if (_currentProfile != null)
            Populate(_currentProfile);
    }

    private bool CanSelectQuirk(TraitPrototype quirk, HumanoidCharacterProfile profile)
    {
        foreach (var selectedId in profile.TraitPreferences)
        {
            if (selectedId == quirk.ID)
                continue;

            var selectedTrait = _proto.Index<TraitPrototype>(selectedId);

            if (quirk.TraitBlacklist?.Contains(selectedId) == true)
                return false;

            if (selectedTrait.TraitBlacklist?.Contains(quirk.ID) == true)
                return false;
        }
        return true;
    }
    // Ganimed trait end

    public void Populate(HumanoidCharacterProfile profile)
    {
        _currentProfile = profile;

        QuirksContainer.RemoveAllChildren();
        PointsLabel.Text = Loc.GetString("quirks-window-points-label", ("points", profile.GetQuirkPoints()));

        var selected = profile.TraitPreferences.Where(x => _proto.Index(x).Quirk).ToList();
        if (selected.Count > 0)
        {
            var selectedStr = string.Join(", ", selected.Select(x => Loc.GetString(_proto.Index(x).Name)));
            SelectedQuirksLabel.SetMessage(Loc.GetString("quirks-window-selected-label", ("quirks", selectedStr)), null, Color.White);
        }
        else
            SelectedQuirksLabel.SetMessage(Loc.GetString("quirks-window-selected-none"), null, Color.White);

        var protoList = _proto.EnumeratePrototypes<TraitPrototype>()
            .Where(x => x.Quirk && !x.SpeciesBlacklist.Contains(profile.Species))
            .ToList();
        // Ganimed trait start
        protoList = protoList.Where(proto =>
        {
            return _currentFilter switch
            {
                QuirkFilter.Positive => proto.Cost < 0,
                QuirkFilter.Negative => proto.Cost > 0,
                QuirkFilter.Neutral => proto.Cost == 0,
                _ => true,
            };
        }).ToList();
        // Ganimed trait end

        protoList.Sort((x, y) => Loc.GetString(x.Name)[0].CompareTo(Loc.GetString(y.Name)[0]));
        protoList.Sort((x, y) => x.Cost.CompareTo(y.Cost));

        foreach (var proto in protoList)
        {
            // Ganimed trait start
            var canSelect = CanSelectQuirk(proto, profile);
            var panel = new QuirkPanel(profile, proto);

            panel.Panel.Button.Disabled = !profile.CanToggleQuirk(proto) || !canSelect;

            panel.Panel.Button.OnPressed += _ => QuirkSelected?.Invoke(proto);
            QuirksContainer.AddChild(panel);
            // Ganimed trait start
        }
    }

    private void AddPanel(HumanoidCharacterProfile profile, TraitPrototype proto)
    {
        var canSelect = CanSelectQuirk(proto, profile);
        var panel = new QuirkPanel(profile, proto);
        panel.Panel.Button.Disabled = !profile.CanToggleQuirk(proto) || !canSelect;
        panel.Panel.Button.OnPressed += _ => QuirkSelected?.Invoke(proto);
        QuirksContainer.AddChild(panel);
    }
}
