using Content.Shared.Audio.Jukebox;
using Robust.Client.Audio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio.Components;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client.Audio.Jukebox;

[GenerateTypedNameReferences]
public sealed partial class JukeboxMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private AudioSystem _audioSystem;
    private readonly List<(string Name, ProtoId<JukeboxPrototype> Id)> _allSongs = new(); // Ganimed edit 

    /// <summary>
    /// Are we currently 'playing' or paused for the play / pause button.
    /// </summary>
    private bool _playState;

    /// <summary>
    /// True if playing, false if paused.
    /// </summary>
    public event Action<bool>? OnPlayPressed;
    public event Action? OnLoopPressed; // Ganimed edit 
    public event Action? OnStopPressed;
    public event Action<ProtoId<JukeboxPrototype>>? OnSongSelected;
    public event Action<float>? SetTime;
    public event Action<float>? SetVolume; /// ADT-Tweak

    private EntityUid? _audio;

    private float _lockTimer;

    public JukeboxMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _audioSystem = _entManager.System<AudioSystem>();

        MusicList.OnItemSelected += args =>
        {
            // Ganimed edit start
            if (MusicList[args.ItemIndex].Metadata is ProtoId<JukeboxPrototype> songId)
            {
                OnSongSelected?.Invoke(songId);
            }
            // Ganimed edit end
        };

        PlayButton.OnPressed += _ => OnPlayPressed?.Invoke(!_playState);
        LoopButton.OnPressed += _ => OnLoopPressed?.Invoke(); // Ganimed edit
        StopButton.OnPressed += _ => OnStopPressed?.Invoke();
        PlaybackSlider.OnReleased += _ => SetTime?.Invoke(PlaybackSlider.Value); // Ganimed edit
        VolumeSlider.OnReleased += _ => { SetVolume?.Invoke(VolumeSlider.Value); _lockTimer = 0.5f; }; // ADT-Tweak

        SearchBar.OnTextChanged += _ => FilterSongs();
        // Ganimed edit end

        SetPlayPauseButton(_audioSystem.IsPlaying(_audio), force: true);

        VolumeSlider.MaxValue = 100f; // ADT-Tweak
    }

    public JukeboxMenu(AudioSystem audioSystem)
    {
        _audioSystem = audioSystem;
    }

    public void SetAudioStream(EntityUid? audio)
    {
        _audio = audio;
    }

    private void PlaybackSliderKeyUp(Slider args)
    {
        SetTime?.Invoke(PlaybackSlider.Value);
        _lockTimer = 0.5f;
    }

    public void SetLoopButton(bool loop)
    {
        LoopButton.Text = Loc.GetString(loop ? "jukebox-menu-buttonloop-on" : "jukebox-menu-buttonloop-off");
    }

    /// <summary>
    /// Re-populates the list of jukebox prototypes available.
    /// </summary>
    public void Populate(IEnumerable<JukeboxPrototype> jukeboxProtos)
    /// Ganimed edit start
    {
        _allSongs.Clear();
        foreach (var proto in jukeboxProtos)
        {
            _allSongs.Add((proto.Name, proto.ID));
        }
        FilterSongs();
    }
    /// Ganimed edit end

    private void FilterSongs()
    {
        /// Ganimed edit start
        MusicList.Clear();
        var filter = SearchBar.Text.Trim().ToLowerInvariant();
        foreach (var song in _allSongs)
        {
            if (string.IsNullOrEmpty(filter) || song.Name.ToLowerInvariant().Contains(filter))
            {
                MusicList.AddItem(song.Name, metadata: song.Id);
            }
        }
        /// Ganimed edit end
        MusicList.SortItemsByText(); /// ADT-Tweak
    }

    public void SetPlayPauseButton(bool playing, bool force = false)
    {
        if (_playState == playing && !force)
            return;

        _playState = playing;
        PlayButton.Text = playing
            ? Loc.GetString("jukebox-menu-buttonpause")
            : Loc.GetString("jukebox-menu-buttonplay");
    }

    public void SetSelectedSong(string name, float length)
    {
        SetSelectedSongText(name);
        PlaybackSlider.MaxValue = length;
        PlaybackSlider.SetValueWithoutEvent(0);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_lockTimer > 0f)
            _lockTimer -= args.DeltaSeconds;

        PlaybackSlider.Disabled = _lockTimer > 0f;
        VolumeSlider.Disabled = _lockTimer > 0f; /// ADT-Tweak

        if (_entManager.TryGetComponent(_audio, out AudioComponent? audio))
        {
            DurationLabel.Text = $@"{TimeSpan.FromSeconds(audio.PlaybackPosition):mm\:ss} / {_audioSystem.GetAudioLength(audio.FileName):mm\:ss}";
        }
        else
        {
            DurationLabel.Text = $"00:00 / 00:00";
        }

        VolumeNumberLabel.Text = $"{VolumeSlider.Value:0.##} %"; /// ADT-Tweak
        if (PlaybackSlider.Grabbed || VolumeSlider.Grabbed) // Ganimed edit 
            return;

        if (audio != null || _entManager.TryGetComponent(_audio, out audio))
            PlaybackSlider.SetValueWithoutEvent(audio.PlaybackPosition);
        else
            PlaybackSlider.SetValueWithoutEvent(0f);

        SetPlayPauseButton(_audioSystem.IsPlaying(_audio, audio));
    }

    public void SetSelectedSongText(string? text)
    {
        SongName.Text = !string.IsNullOrEmpty(text) ? text : "---"; // Ganimed edit 
    }

    /// ADT-Tweak start
    public void SetVolumeSlider(float volume)
    {
        VolumeSlider.Value = volume;
    }
    /// ADT-Tweak end
}
