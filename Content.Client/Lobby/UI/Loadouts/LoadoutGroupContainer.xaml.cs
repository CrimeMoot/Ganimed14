using System.Linq;
using Content.Shared.Clothing;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Client.Corvax.Sponsors; // Ganimed sponsor
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using System.Linq;

namespace Content.Client.Lobby.UI.Loadouts;

[GenerateTypedNameReferences]
public sealed partial class LoadoutGroupContainer : BoxContainer
{
    private const string ClosedGroupMark = "▶";
    private const string OpenedGroupMark = "▼";

    /// <summary>
    /// A dictionary that stores open groups
    /// </summary>
    private Dictionary<string, bool> _openedGroups = new();

    private readonly LoadoutGroupPrototype _groupProto;
    private readonly SponsorsManager _sponsorsManager; // Ganimed sponsor

    public event Action<ProtoId<LoadoutPrototype>>? OnLoadoutPressed;
    public event Action<ProtoId<LoadoutPrototype>>? OnLoadoutUnpressed;

    public LoadoutGroupContainer(HumanoidCharacterProfile profile, RoleLoadout loadout, LoadoutGroupPrototype groupProto, ICommonSession session, IDependencyCollection collection, bool isSponsor)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _groupProto = groupProto;

        _sponsorsManager = collection.Resolve<SponsorsManager>(); // Ganimed sponsor

        RefreshLoadouts(profile, loadout, session, collection, isSponsor);
    }

    /// <summary>
    /// Updates button availabilities and buttons.
    /// </summary>
    public void RefreshLoadouts(HumanoidCharacterProfile profile, RoleLoadout loadout, ICommonSession session, IDependencyCollection collection, bool isSponsor)
    {
        var protoMan = collection.Resolve<IPrototypeManager>();
        var loadoutSystem = collection.Resolve<IEntityManager>().System<LoadoutSystem>();
        RestrictionsContainer.DisposeAllChildren();

        if (_groupProto.MinLimit > 0)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-min-limit", ("count", _groupProto.MinLimit)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        if (_groupProto.MaxLimit > 0)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-max-limit", ("count", _groupProto.MaxLimit)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        if (protoMan.TryIndex(loadout.Role, out var roleProto) && roleProto.Points != null && loadout.Points != null)
        {
            RestrictionsContainer.AddChild(new Label()
            {
                Text = Loc.GetString("loadouts-points-limit", ("count", loadout.Points.Value), ("max", roleProto.Points.Value)),
                Margin = new Thickness(5, 0, 5, 5),
            });
        }

        LoadoutsContainer.DisposeAllChildren();
        // Didn't use options because this is more robust in future.

        // Ganimed sponsor start
        IEnumerable<ProtoId<LoadoutPrototype>> groupLoadouts = _groupProto.Loadouts;

        if (_groupProto.ID == "Inventory")
        {
            // Для группы Inventory — отображаем только те вещи, что указаны в HTTP API (allowedMarkings).
            // Это работает даже если игрок не спонсор.
            string[] allowedItems = Array.Empty<string>();

            if (_sponsorsManager.TryGetInfo(out var sponsor))
            {
                allowedItems = sponsor.AllowedMarkings ?? Array.Empty<string>();
            }

            groupLoadouts = protoMan.EnumeratePrototypes<LoadoutPrototype>()
                .Where(p => allowedItems.Contains(p.ID))
                .Select(p => (ProtoId<LoadoutPrototype>)p.ID)
                .ToList();
        }
        // Ganimed sponsor end

        var selected = loadout.SelectedLoadouts[_groupProto.ID];

        foreach (var loadoutProto in groupLoadouts) // Ganimed sponsor
        {
            if (!protoMan.TryIndex(loadoutProto, out var loadProto))
                continue;

            // Ganimed sponsor start
            // Лоадуты с SponsorOnly допускаются только при наличии разрешения в API
            if (loadProto.SponsorOnly)
            {
                if (!_sponsorsManager.TryGetInfo(out var sponsor))
                    continue;

                if (!sponsor.AllowedMarkings.Contains(loadProto.ID))
                    continue;
            }
            // Ganimed sponsor stop

            var matchingLoadout = selected.FirstOrDefault(e => e.Prototype == loadoutProto);
            var pressed = matchingLoadout != null;

            var enabled = loadout.IsValid(profile, session, loadoutProto, collection, out var reason);
            // Ganimed sponsor start
            var loadoutContainer = new LoadoutContainer(loadoutProto, !enabled, reason)
            {
                Select =
                {
                    Pressed = pressed,
                },
                Text = loadoutSystem.GetName(loadProto)
            };
            // Ganimed sponsor end

            loadoutContainer.Select.OnPressed += args =>
            {
                if (args.Button.Pressed)
                    OnLoadoutPressed?.Invoke(loadoutProto);
                else
                    OnLoadoutUnpressed?.Invoke(loadoutProto);
            };

            LoadoutsContainer.AddChild(loadoutContainer);
        }
    }
}